// src/app/services/api.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Observable, catchError, throwError } from 'rxjs';

export interface Todo {
  id: number;
  title: string;
  completed: boolean;
  // add other fields your API returns
}

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  //private baseUrl = 'https://jsonplaceholder.typicode.com'; // your API base
  private baseUrl = 'https://localhost:44312/api/'; // your API base

  constructor(private http: HttpClient) {}

  getTodos(): Observable<Todo[]> {
    return this.http
      .get<Todo[]>(`${this.baseUrl}/Tiny`)
      .pipe(
        catchError(err => {
          console.error('Error fetching todos', err);
          return throwError(() => new Error('Failed to fetch todos'));
        })
      );
  }

  getTodoById(id: number): Observable<Todo> {
    return this.http.get<Todo>(`${this.baseUrl}/todos/${id}`);
  }

  createTodo(todo: Partial<Todo>): Observable<Todo> {
    // Partial<Todo> because id may be generated by server
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.post<Todo>(`${this.baseUrl}/todos`, todo, { headers });
  }

  updateTodo(id: number, changes: Partial<Todo>): Observable<Todo> {
    return this.http.put<Todo>(`${this.baseUrl}/todos/${id}`, changes);
  }

  deleteTodo(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/todos/${id}`);
  }

  // Example with query params
  getTodosWithQuery(status: string): Observable<Todo[]> {
    const params = new HttpParams().set('completed', status);
    return this.http.get<Todo[]>(`${this.baseUrl}/todos`, { params });
  }
}
